plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.3'
	id 'io.freefair.lombok' version '8.6'
}

version = project.mod_version
group = project.maven_group

loom {
	accessWidenerPath = file("src/main/resources/offlineplayersreworked.accesswidener")
	runtimeOnlyLog4j = true
}

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		url = "https://api.modrinth.com/maven"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//	Midnightlib Config dependency
	modImplementation include("maven.modrinth:midnightlib:${project.midnightlib_version}")

	// Include jsondb-core and its dependencies
	implementation include("io.jsondb:jsondb-core:${project.jsondb_version}")
	implementation include("commons-logging:commons-logging:${project.commonslogging_version}")
	implementation include("com.google.guava:guava:${project.guava_version}")

	// Add Jackson dependencies
	implementation include("com.fasterxml.jackson.core:jackson-core:${project.jackson_version}")
	implementation include("com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}")
	implementation include("com.fasterxml.jackson.module:jackson-module-parameter-names:${project.jackson_version}")
	implementation include("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${project.jackson_version}")
	implementation include("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${project.jackson_version}")
	implementation include("com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}")

	// Include Reflections 0.9.10 explicitly
	implementation include("org.reflections:reflections:${project.reflections_version}")

	// Include other JsonDB Dependencies.
	implementation include("org.javassist:javassist:${project.javassist_version}")
	implementation include("com.google.guava:guava:${project.guava_version}")
	implementation include("commons-beanutils:commons-beanutils:${project.commonsbeanutils_version}")
	implementation include("commons-jxpath:commons-jxpath:${project.commonsjxpath_version}")
	implementation include("org.slf4j:slf4j-api:${project.slf4j_version}")
	implementation include("commons-logging:commons-logging:${project.commonslogging_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archives_base_name

			artifact(remapJar.archiveFile) {
				builtBy remapJar
				classifier null
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
				classifier "sources"
			}
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}